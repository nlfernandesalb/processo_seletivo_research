# -*- coding: utf-8 -*-
"""Processo_Seletivo_Definitivo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h57GG9tfbhp5AS_206AIeofdqiuB8kd7

**Código definitivo Nicole para _Estágio Research Rico_**

O código pode ser encontrado em: https://colab.research.google.com/drive/1h57GG9tfbhp5AS_206AIeofdqiuB8kd7#scrollTo=7TkLt6j-AKRH
"""

!pip install python-docx fpdf

!pip install reportlab

# **Importa bibliotecas para manipulação de documentos Word e criação de PDFs**
from docx import Document
from fpdf import FPDF
from datetime import datetime

# **Instala a biblioteca reportlab para manipulação avançada de PDFs**
!pip install reportlab
from reportlab.lib.utils import Image
from reportlab.lib.units import inch
from reportlab.platypus import Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
import os
from reportlab.lib.utils import ImageReader

# **Classe personalizada para criar o PDF**
class PDF(FPDF):
    # **Método para adicionar o cabeçalho em todas as páginas, exceto a primeira**
    def header(self):
        if self.page_no() != 1:
            self.set_font('Arial', 'B', 8)  # **Define a fonte e o tamanho do texto do cabeçalho**
            self.set_text_color(0, 0, 0)  # **Define a cor do texto**
            self.cell(0, 5, 'Relatório de Investimentos - Família Trend', 0, 1, 'C')  # **Texto centralizado no cabeçalho**
            self.ln(2)  # **Adiciona uma linha em branco para espaçamento**

    # **Método para adicionar o rodapé em todas as páginas**
    def footer(self):
        self.set_y(-10)  # **Posiciona o rodapé mais próximo do final da página**
        self.set_font('Arial', 'I', 6)  # **Define a fonte e o tamanho do texto do rodapé**
        self.cell(0, 5, f'Página {self.page_no()}', 0, 0, 'C')  # **Adiciona o número da página no rodapé**

# **Função para limpar texto, substituindo caracteres Unicode problemáticos**
def clean_text(text):
    replacements = {
        '\u2013': '-',
        '\u2014': '-',
        '\u2018': "'",
        '\u2019': "'",
        '\u201c': '"',
        '\u201d': '"',
        '\u2026': '...',
        '\u00a0': ' ',
    }
    for unicode_char, replacement in replacements.items():
        text = text.replace(unicode_char, replacement)
    return text

# **Função para processar os parágrafos do documento Word e categorizá-los**
def process_paragraphs(doc):
    content = []
    current_fund = None

    for paragraph in doc.paragraphs:
        text = clean_text(paragraph.text.strip())  # **Remove espaços em branco e limpa o texto**

        if not text:
            continue

        if text.startswith("Trend"):
            if current_fund:
                content.append(current_fund)
            current_fund = {'title': text, 'description': []}
        elif "O que é esse investimento?" in text or "Por que está nessa lista de sugestões?" in text:
            if current_fund:
                current_fund['description'].append({'subtitle': text, 'text': ''})
        elif "Disclaimer" in text:
            if current_fund:
                current_fund['disclaimer'] = text
        else:
            if current_fund and current_fund['description']:
                current_fund['description'][-1]['text'] += ' ' + text
            elif current_fund:
                current_fund['text'] = text

    if current_fund:
        content.append(current_fund)

    return content

# **Função para adicionar a capa ao relatório em PDF**
def add_cover_page(pdf):
    pdf.add_page()

    # **Adicionar logo à capa**
    pdf.image('logo xp inc.png', x=80, y=49, w=50)  # **Ajuste a posição e o tamanho conforme necessário**

    # **Adicionar título à capa**
    pdf.set_font('Arial', 'B', 18)  # **Define a fonte e o tamanho do título**
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 50, '', ln=True)  # **Espaçamento para centralizar o título**
    pdf.cell(0, 8, 'Relatório de Investimentos', ln=True, align='C')  # **Adiciona o título**
    pdf.cell(0, 8, 'Família Trend', ln=True, align='C')  # **Adiciona o subtítulo**
    pdf.ln(5)  # **Adiciona um pequeno espaçamento**
    pdf.set_font('Arial', 'I', 12)  # **Define a fonte e o tamanho da data**
    pdf.cell(0, 8, f'Data: {datetime.now().strftime("%d de %B de %Y")}', ln=True, align='C')  # **Adiciona a data à capa**

    elementos = []

    # **Define o estilo para o título do documento**
    estilo_titulo = getSampleStyleSheet()['Title']

    # **Título do relatório**
    titulo = "Relatório de Investimentos - Família Trend"
    elementos.append(Paragraph(titulo, estilo_titulo))  # **Adiciona o título ao documento**
    elementos.append(Spacer(1, 12))

    elementos.append(Spacer(1, 24))

# **Função para criar o PDF com base no conteúdo processado**
def create_pdf(content, output_pdf):
    pdf = PDF()
    pdf.set_margins(20, 20, 20)  # **Define as margens do documento**

    add_cover_page(pdf)

    pdf.add_page()

    # **Adicionar subtítulo na nova página**
    pdf.set_font('Arial', 'B', 13)  # **Define a fonte para o subtítulo**
    pdf.cell(0, 10, 'Sugestão de Fundos por Classe de Ativo', ln=True, align='C')  # **Adiciona o subtítulo**
    pdf.ln(4)  # **Adiciona um espaço após o subtítulo**

    # **Adiciona o conteúdo dos fundos ao PDF**
    for fund in content:
        if 'title' in fund:
            pdf.set_font('Arial', '', 10)  # **Define a fonte para o título do fundo**
            pdf.multi_cell(0, 5, fund['title'])  # **Adiciona o título do fundo**
            pdf.ln(3)  # **Adiciona um espaço após o título**

        if 'text' in fund:
            pdf.set_font('Arial', '', 10)  # **Define a fonte para o texto do fundo**
            pdf.multi_cell(0, 5, fund['text'])  # **Adiciona o texto do fundo**
            pdf.ln(3)  # **Adiciona um espaço após o texto**

        for desc in fund.get('description', []):
            pdf.set_font('Arial', '', 10)  # **Define a fonte para o subtítulo**
            pdf.set_text_color(0, 0, 0)
            pdf.multi_cell(0, 5, desc['subtitle'])  # **Adiciona o subtítulo**
            pdf.set_font('Arial', '', 10)  # **Define a fonte para o texto da descrição**
            pdf.multi_cell(0, 5, desc['text'])  # **Adiciona o texto da descrição**
            pdf.ln(3)  # **Adiciona um espaço após a descrição**

            # **Adiciona um link clicável**
            if "Confira nossa visão para essa classe de ativo aqui" in desc['text']:
                pdf.set_font('Arial', 'I', 10)  # **Define a fonte para o link**
                pdf.set_text_color(0, 0, 255)  # **Define a cor do texto do link**
                pdf.cell(0, 5, "Confira nossa visão para essa classe de ativo aqui", ln=True, align='C', link="https://conteudos.xpi.com.br/guia-de-investimentos/")  # **Adiciona o link**

    # **Adiciona o disclaimer ao final do PDF**
    if 'disclaimer' in content[-1]:
        pdf.add_page()
        pdf.set_font('Arial', 'I', 8)  # **Define a fonte para o disclaimer**
        pdf.multi_cell(0, 5, content[-1]['disclaimer'])  # **Adiciona o disclaimer**

    pdf.output(output_pdf)  # **Salva o PDF**
    print(f"PDF criado com sucesso em {output_pdf}")  # **Mensagem de confirmação**

# **Função principal para gerar o relatório**
def generate_report(input_docx, output_pdf):
    doc = Document(input_docx)  # **Carrega o documento Word**
    content = process_paragraphs(doc)  # **Processa o conteúdo do documento**
    create_pdf(content, output_pdf)  # **Cria o PDF com o conteúdo processado**

# **Caminhos de exemplo para os arquivos de entrada e saída**
input_file = "Guia_de_Investimentos_(lista_de_Trends).docx"  # **A cada novo documento word, é necessário subir o arquivo na plataforma e aletrar seu nome para que a máquina atualize as informações**
output_file = "Relatorio_Investimentos_Familia_Trend_3.pdf" #Nome do aruivo gerado em PDF

# **Gera o relatório**
generate_report(input_file, output_file)